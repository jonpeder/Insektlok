#' @export
stedsnavn <- function (lon, lat) {
# output values
output <- data.frame(lon,
lat,
county = "",
municipality = "",
locality = "",
type = "",
dist_m = "",
orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lon)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
Loc_df <- NULL
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
Loc_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(Loc_df[3,8])==FALSE) {
break
}
else {
next
}
}
# Calculate distnce and angle between input coordinates and locality-name
name_lon <- as.numeric(Loc_df[3,9])
name_lat <- as.numeric(Loc_df[3,10])
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- Loc_df[3,7]
output$municipality[i] <- Loc_df[3,6]
output$locality[i] <- Loc_df[3,8]
output$type[i] <- Loc_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
return(output[,c(3:8)])
}
stedsnavn(7.357168, 62.116524)
#'
#' Returns locality data from one, or a set of input coordinates (projection longlat, datum WGS84). Locality names are obtained from the Norwegian locality-name-base (Sentralt Stedsnavnregister). For each input coordinate, the function returns the locality name  that is closest in distance. The maximum distance from a locality name is 1000 m.
#' @param lon a numerical value, or vector of numerical values, that specifies the longitude(s) in the input coordinates
#' @param lat a numerical value, or vector of numerical values, that specifies the latitude(s) in the input coordinates
#' @return dataframe with locality data
#' @examples example_output <- strandkoder(lon = c(24.840064, 23.186622),
#' @examples                               lat = c(69.57696, 70.44070))
#' @import XML
#' @importFrom RCurl getURL
#' @export
stedsnavn <- function (lat, lon) {
# output values
output <- data.frame(lat,
lon,
county = "",
municipality = "",
locality = "",
type = "",
dist_m = "",
orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
#Loc_df <- NULL
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# Calculate distnce and angle between input coordinates and locality-name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
return(output[,c(3:8)])
}
stedsnavn(62.068876, 7.433116)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::rd_roclet()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all(".")
example_output <- strandkoder(lat = c(69.57696, 70.44070),
#' @examples                               lon = c(24.840064, 23.186622))
)
example_output <- strandkoder(lat = c(69.57696, 70.44070),                               lon = c(24.840064, 23.186622))
View(example_output)
example_output <- stedsnavn(lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622))
example_output <- stedsnavn(lat = c(69.57696, 70.44070),lon = c(24.840064, 23.186622))
devtools::load_all(".")
example_output <- stedsnavn(lat = c(69.57696, 70.44070),lon = c(24.840064, 23.186622))
stedsnavn <- function (lat, lon) {
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# Calculate distnce and angle between input coordinates and locality-name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
return(output[,c(3:8)])
}
stedsnavn(lat = c(69.57696, 70.44070),lon = c(24.840064, 23.186622))
lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622)
lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622)
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622)
lat = c(69.57696, 70.44070)
lon = c(24.840064, 23.186622)
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# Calculate distnce and angle between input coordinates and locality-name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], u*50, A = 45) # Upper right point of boundry box
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 5*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 5*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
View(name_df)
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 10*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 10*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 20*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 20*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 30*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 30*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 40*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 40*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
lat = c(69.57696, 70.44070)
lon = c(24.840064, 23.186622)
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[1], lon[1], 40*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[1], lon[1], 40*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# extract coordinates of locality name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
tryCatch({
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters of coordinates on row ", i, "\n\n")})
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
View(output)
lat = c(69.57696, 70.44070)
lon = c(24.840064, 23.186622)
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# extract coordinates of locality name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
tryCatch({
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters of coordinates on row ", i, "\n\n")})
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}
lat = c(69.57696, 70.44070)
lon = c(24.840064, 23.186622)
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:20){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# extract coordinates of locality name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
tryCatch({
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters of coordinates on row ", i, "\n\n")})
}
View(output)
#'
#' Returns locality data from one, or a set of input coordinates (projection longlat, datum WGS84). Locality names are obtained from the Norwegian locality-name-base (Sentralt Stedsnavnregister). For each input coordinate, the function returns the locality name  that is closest in distance. The maximum distance from a locality name is 1000 m.
#' @param lon a numerical value, or vector of numerical values, that specifies the longitude(s) in the input coordinates
#' @param lat a numerical value, or vector of numerical values, that specifies the latitude(s) in the input coordinates
#' @return dataframe with locality data
#' @examples example_output <- stedsnavn(lat = c(69.57696, 70.44070),
#' @examples                               lon = c(24.840064, 23.186622))
#' @import XML
#' @importFrom RCurl getURL
#' @export
stedsnavn <- function (lat, lon) {
# output values
output <- data.frame(lat, lon, county = "", municipality = "", locality = "", type = "", dist_m = "", orient = "")
# Search for locality names coordinate by coordinate in a loop
for (i in 1:length(lat)) {
# For each coordinate, make up to 20 searches and expand the boundry box by 50 meters for each seach. Maximum distance from a locality name may be 1000 meters
for (u in 1:40){
# Calculate the boundry box coordinates coordinates using the deg2point function
x = deg2point(lat[i], lon[i], u*50, A = 225) # Lower left point of boundry box
y = deg2point(lat[i], lon[i], u*50, A = 45) # Upper right point of boundry box
# Search for a locality name within the given coordinates
xURL <- paste("https://ws.geonorge.no/SKWS3Index/ssr/sok?nordLL=", x[1], "&ostLL=", x[2], "&nordUR=", y[1], "&ostUR=", y[2], "&epsgKode=", 4326, sep = "")
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2<- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
name_df <- xmlToDataFrame(xml_temp2)
#Stop loop at first hit
if (is.null(name_df[3,8])==FALSE) {
break
}
else {
next
}
}
# extract coordinates of locality name
name_lon <- as.numeric(name_df[3,9])
name_lat <- as.numeric(name_df[3,10])
# Calculate distnce and angle between input coordinates and locality-name. Use 'tryCatch' for error handeling
tryCatch({
D <- points2dist(name_lon, name_lat, lon[i], lat[i])
A <- points2angle(name_lon, name_lat, lon[i], lat[i])
# Add search results to input table
output$county[i] <- name_df[3,7]
output$municipality[i] <- name_df[3,6]
output$locality[i] <- name_df[3,8]
output$type[i] <- name_df[3,5]
output$dist_m[i] <- round(D)
output$orient[i] <- A
}, error = function(e) {cat("Error:", conditionMessage(e), "\n-No locality name found within a distance of 2000 meters from coordinates on row ", i, "\n\n")})
}
return(output[,c(3:8)])
}
stedsnavn(lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622))
#' strandkoder
#'
#' Returns Strand-codes from one, or a set of input coordinates (projection longlat, datum WGS84). The strand-codes are obtained by identifying the intesects beween the input coordinates and a polygon dataset of the Strand regions. This dataset was created by Endrestøl (2021), following the revision of the Strand-system by Økland (1981).
#' @param lon a numerical value, or vector of numerical values, that specifies the longitude(s) in the input coordinates
#' @param lat a numerical value, or vector of numerical values, that specifies the latitude(s) in the input coordinates
#' @return dataframe with Strand-codes
#' @examples example_output <- strandkoder(lat = c(69.57696, 70.44070),
#' @examples                               lon = c(24.840064, 23.186622))
#' @import sp
#' @export
strandkoder <- function(lat, lon) {
# Save longlat projection to variable
ll_prj <- "+proj=longlat +datum=WGS84"
# Import coordinates dataset
lonlat <- data.frame(lon, lat)
# Convert decimal-longlat to SpatialPoints class, with projection longlat datum wgs84
pts <- SpatialPoints(lonlat, CRS(ll_prj))
# Convert 'strand' spatial polygons dataframe to projection longlat and datum wgs84
strand.4.0 <- spTransform(strand, CRS(ll_prj))
# Identify municipalities intersecting with input coordinates
strand_codes <- over(pts, strand.4.0)
# Return dataframe
return(data.frame(strand = strand_codes[,2]))
}
strandkoder(strandkoder(lat = c(69.57696, 70.44070),
lon = c(24.840064, 23.186622)))
strandkoder(strandkoder(lat = c(69.57696, 70.44070), lon = c(24.840064, 23.186622)))
strandkoder(lat = c(69.57696, 70.44070), lon = c(24.840064, 23.186622)))
strandkoder(lat = c(69.57696, 70.44070), lon = c(24.840064, 23.186622))
strandkoder(lat = c(69.57696, 70.44070, 62.259262),
lon = c(24.840064, 23.186622, 12.734821))
stedsnavn(c(69.57696, 70.44070, 62.259262),
lon = c(24.840064, 23.186622, 12.734821))
#' @param lon a numerical value, or vector of numerical values, that specifies the longitude(s) in the input coordinates
#' @param lat a numerical value, or vector of numerical values, that specifies the latitude(s) in the input coordinates
#' @return dataframe with Strand-codes and locality data
#' @examples example_input <- data.frame("COL_ID" = c("JPL_0051", "JPL_0052", "JPL_0053"),
#' @examples                             "Latitude" = c(69.57696, 70.44070, 62.259262),
#' @examples                             "Longitude" = c(24.840064, 23.186622, 12.734821))
#' @examples example_output <- strandr(example_input,
#' @examples                           lat = example_input$Latitude,
#' @examples                           lon = example_input$Longitude)
#' @export
strandr <- function(table_input, lat, lon) {
# Get Strand-codes
strand_codes <- strandkoder(lat, lon)
# Get locality data
locality_data <- stedsnavn(lat, lon)
# Add Strand-codes and locality data to input table
table_input <- data.frame(table_input, strand_codes, locality_data)
return(table_input)
}
data.frame("COL_ID" = c("JPL_0051", "JPL_0052", "JPL_0053"),
"Latitude" = c(69.57696, 70.44070, 62.259262),
"Longitude" = c(24.840064, 23.186622, 12.734821))
data.frame("COL_ID" = c("JPL_0051", "JPL_0052", "JPL_0053"),
"Latitude" = c(69.57696, 70.44070, 62.259262),
"Longitude" = c(24.840064, 23.186622, 12.734821))
example_input <- data.frame("COL_ID" = c("JPL_0051", "JPL_0052", "JPL_0053"),
"Latitude" = c(69.57696, 70.44070, 62.259262),
"Longitude" = c(24.840064, 23.186622, 12.734821))
example_output <- strandr(example_input,
lat = example_input$Latitude,
lon = example_input$Longitude)
View(example_output)
roxygen2::roxygenise()
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn # Sjekk ut tabellen
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn # Sjekk ut tabellen
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn # Sjekk ut tabellen
eks_inn <- read.table("koordinater.txt", sep = "\t", header = TRUE) # Les inn tabellen
eks_inn # Sjekk ut tabellen
library(strandr) # Last inn 'strandr'
# Legg tabell inn i funksjonen og spesifiser parametrene lengdegrad (lon) og breddegrad (lat)
eks_ut <- strandr(eks_inn, lon = eks_inn$longitude, lat = eks_inn$latitude)
eks_ut # Sjekk ut den nye tabellen
bare_strand <- strandkoder(eks_inn$)
bare_strand <- strandkoder(eks_inn$latitude, eks_inn$longitude)
bare_strand
bare_lok <- stedsnavn(eks_inn$latitude, eks_inn$longitude)
bare_lok
devtools::load_all(".")
View(bare_lok)
bare_lok <- stedsnavn(eks_inn$latitude, eks_inn$longitude)
git push --help
ls

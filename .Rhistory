library(devtools)
library(roxygen2)
library(Insektlok)
devtools::load_all(".")
devtools::document()
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" = c(24.840064, 23.186622), "Latitude" = c(69.57696, 70.44070))
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
roxygenise()
roxygen2::rd_roclet()
library(Insektlok)
devtools::load_all(".")
roxygenise()
library(Insektlok)
devtools::load_all(".")
xURL <- "https://ws.geonorge.no/SKWS3Index/ssr/sok?ostLL=18.89877&nordLL=69.626616&ostUR=18.925805&nord=96.630105&epsgKode=4326"
xml_temp <- getURL(xURL, .encoding = "latin1")
library(xml)
library(XML)
xml_temp <- getURL(xURL, .encoding = "latin1")
library(RCurl)
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2 <- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
Loc_df <- xmlToDataFrame(xml_temp2)
Loc_df
xURL
getURL(xURL)
xURL <- "https://ws.geonorge.no/SKWS3Index/ssr/sok?ostLL=18.89877&nordLL=69.626616&ostUR=18.925805&nord=69.630105&epsgKode=4326"
getURL(xURL)
xURL <- "https://ws.geonorge.no/SKWS3Index/ssr/sok?ostLL=18.89877&nordLL=69.626616&ostUR=18.925805&nordUR=69.630105&epsgKode=4326"
getURL(xURL)
xml_temp <- getURL(xURL, .encoding = "latin1")
xml_temp2 <- xmlTreeParse(xml_temp, useInternalNodes = TRUE)
Loc_df <- xmlToDataFrame(xml_temp2)
Loc_df
Loc_df[3,8]
Loc_df[3,9]
Loc_df[3,10]
print("[N]")
library(Insektlok)
library(Insektlok)
devtools::load_all(".")
library(Insektlok)
devtools::load_all(".")
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" = c(24.840064, 23.186622), "Latitude" = c(69.57696, 70.44070))
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
pi
library(Insektlok)
devtools::load_all(".")
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" = c(24.840064, 23.186622), "Latitude" = c(69.57696, 70.44070))
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
class(ex_out$Dist_m)
as.numerical(ex_out$Dist_m)
as.numeric(ex_out$Dist_m)
library(Insektlok)
devtools::load_all(".")
points2angle(18.676000, 69.465751, 18.204128, 69.605646)
devtools::load_all(".")
points2angle(18.676000, 69.465751, 18.204128, 69.605646)
points2dist(18.676000, 69.465751, 18.204128, 69.605646)
devtools::load_all(".")
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
round(3,3333)
devtools::load_all(".")
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
points2angle(24.8446431, 69.588912, 24.840064, 69.57696)
devtools::load_all(".")
points2angle(24.8446431, 69.588912, 24.840064, 69.57696)
devtools::load_all(".")
devtools::load_all(".")
points2angle(24.8446431, 69.588912, 24.840064, 69.57696)
devtools::load_all(".")
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
library(Insektlok)
devtools::load_all(".")
devtools::load_all(".")
ex_out <- Stedsnavn(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
library(Insektlok)
devtools::load_all(".")
library(Insektlok)
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052", "JPL0897"), "Longitude" =c(24.840064, 23.186622, 24.9501906), "Latitude" = c(69.57696, 70.44070, 69.6406788))
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
devtools::load_all(".")
ex_out <- Insektlok(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
ex_out
library(Insektlok)
#' @param long The specific row in the input table containing longitudes
#' @param lat The specific row in the input table containing latitudes
#' @return Returns the input dataframe with strand-codes added to it
#' @examples ex_in <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" =
#' @examples          c(24.840064, 23.186622), "Latitude" = c(69.57696, 70.44070))
#' @examples ex_out <- Strandkoder(ex_in, long = ex_in$Longitude, lat = ex_in$Latitude)
#' @import sp
#' @import maptools
#' @import rgdal
#' @export
strandkoder <- function(longlatTable, long, lat) {
# Import coordinates dataset
longlat <- data.frame(long, lat)
# Convert dataset from Dataframe to SpatialPoints class, with correct CRS
pts <- SpatialPoints(longlat, CRS("+init=epsg:4258"))
# Import Strand-codes/municipality-codes table
strandx <- strand
strandx$nummer <- as.character(strandx$nummer) # Change class from integer to character
# Import municipality polygon data in geojson format
kom_sp <- kommuner
kom_sp$Kommunenum <- as.character(kom_sp$Kommunenum) # Change class from integer to character
kom_ll <- spTransform(kom_sp, CRS("+proj=longlat +datum=WGS84")) # Reproject the data into longlat coordinate reference system with WGS84 datum
# Identify municipalities intersecting with input coordinates
ints <- NULL
ints <- as.data.frame(kom_ll[pts[1], ])
for (i in 1:length(pts)){
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
# Add strand-codes to the dataset
for (i in 1:nrow(longlatTable)) {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
return(longlatTable)
}
test <- data.frame(x = 65.834832, y = 13.191234)
strandkoder(test, test$x, test$y)
library(c(sp, maptools, rgdal))
library(sp)
library(maptools)
install.packages("maptools")
library(maptools)
library(rgdal)
install.packages("maptools")
install.packages("foreign")
strandkoder(test, test$x, test$y)
devtools::load_all(".")
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("ape", "aplot", "backports", "beautier", "callr", "cli", "clipr", "covr", "data.table", "devtools", "digest", "dplyr", "DT", "fs", "glue", "htmlwidgets", "igraph", "jsonlite", "knitr", "labeling", "MASS", "mgcv", "nlme", "openssl", "processx", "ps", "rgdal", "rlang", "rmarkdown", "seqinr", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun"))
devtools::load_all(".")
version
install.packages(c("XML", "RCurl", "sp", "maptools", "rgdal"))
library(rgdal)
install.packages("rgdal")
install.packages("rgdal", dependencies = TRUE)
library(rgdal)
install.packages("rgdal")
devtools::load_all(".")
rm(list = c("strandkoder"))
devtools::load_all(".")
library(strandr)
library(strandr)
devtools::load_all(".")
data.frame(ID = "test", lon = 24.840064, lat = 69.57696,)
data.frame(ID = "test", lon = 24.840064, lat = 69.57696)
strandr(data.frame(ID = "test", lon = 24.840064, lat = 69.57696),long = 24.840064, lat = 69.57696)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(strandr)
devtools::load_all(".")
library(strandr)
strandr(data.frame(ID = "test", lat = 65.834805, lon = 13.191345),long = 13.191345, lat = 65.834805)
devtools::load_all(".")
longlatTable
longlatTable  <- data.frame(data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" = c(13.191345, 23.186622), "Latitude" = c(65.834805, 70.44070)))
long <- longlatTable$Longitude
lat <- longlatTable$Latitude
# Import coordinates dataset
longlat <- data.frame(long, lat)
# Convert dataset from Dataframe to SpatialPoints class, with CRS wgs84
pts <- SpatialPoints(longlat, CRS("+proj=longlat +datum=WGS84"))
# Import Strand-codes/municipality-codes table
strandx <- strand
strandx$nummer <- as.character(strandx$nummer) # Change class from integer to character
# Import municipality polygon data in geojson format
kom_sp <- kommuner
kom_sp$Kommunenum <- as.character(kom_sp$Kommunenum) # Change class from integer to character
kom_ll <- spTransform(kom_sp, CRS("+proj=longlat +datum=WGS84")) # Reproject the data into longlat coordinate reference system with WGS84 datum
# Identify municipalities intersecting with input coordinates
ints <- NULL
ints <- as.data.frame(kom_ll[pts[1], ])
for (i in 1:length(pts)){
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
}
as.data.frame(kom_ll[pts[1], ])
as.data.frame(kom_ll[pts[2], ])
as.data.frame(kom_ll[pts[1], ])
as.data.frame(kom_ll[pts[1], ]) == 0
as.data.frame(kom_ll[pts[1], ]) == 0
as.data.frame(kom_ll[pts[1], ])
as.data.frame(kom_ll[pts[2], ])
length(as.data.frame(kom_ll[pts[1], ]))
nrow(as.data.frame(kom_ll[pts[1], ]))
nrow(as.data.frame(kom_ll[pts[2], ]))
nrow(as.data.frame(kom_ll[pts[2], ])) == 0
nrow(as.data.frame(kom_ll[pts[2], ])) == 1
is.null(nrow(as.data.frame(kom_ll[pts[2], ])))
is.null(nrow(as.data.frame(kom_ll[pts[1], ])))
nrow(as.data.frame(kom_ll[pts[1], ])) == 0
kom_ll[pts[1], ]
kom_ll[pts[2], ]
kom_ll[pts[1], ]
length(kom_ll[pts[1], ])
length(kom_ll[pts[2], ])
as.data.frame(kom_ll[pts[1], ])
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(kom_ll[pts[i], ] == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
kom_ll[pts[1], ] == 1
kom_ll[pts[1], ] =! 0
kom_ll[pts[1], ] != 0
kom_ll[pts[2], ] != 0
kom_ll[pts[2], ] == 0
kom_ll[pts[1], ] == 0
kom_ll[pts[1], ]
length(kom_ll[pts[1], ])
length(kom_ll[pts[1], ]) == 0
length(kom_ll[pts[1], ]) == 1
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
return(longlatTable)
longlatTable
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- c(NA, NA)
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
longlatTable
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
devtools::load_all(".")
library(strandr)
devtools::load_all(".")
library(strandr)
longlatTable <- data.frame("COL_ID" = c("JPL0051", "JPL0052"), "Longitude" = c(13.191345, 23.186622), "Latitude" = c(65.834805, 70.44070))
long <- longlatTable$Longitude
lat <- longlatTable$Latitude
# Import coordinates dataset
longlat <- data.frame(long, lat)
# Convert dataset from Dataframe to SpatialPoints class, with CRS wgs84
pts <- SpatialPoints(longlat, CRS("+proj=longlat +datum=WGS84"))
# Import Strand-codes/municipality-codes table
strandx <- strand
strandx$nummer <- as.character(strandx$nummer) # Change class from integer to character
devtools::load_all(".")
# Import coordinates dataset
longlat <- data.frame(long, lat)
# Convert dataset from Dataframe to SpatialPoints class, with CRS wgs84
pts <- SpatialPoints(longlat, CRS("+proj=longlat +datum=WGS84"))
# Import Strand-codes/municipality-codes table
strandx <- strand
strandx$nummer <- as.character(strandx$nummer) # Change class from integer to character
# Import municipality polygon data in geojson format
kom_sp <- kommuner
kom_sp$Kommunenum <- as.character(kom_sp$Kommunenum) # Change class from integer to character
kom_ll <- spTransform(kom_sp, CRS("+proj=longlat +datum=WGS84")) # Reproject the data into longlat coordinate reference system with WGS84 datum
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
ints
strandx$Strand_kode[strandx$nummer == ints$Kommunenum[1]]
strandx$Strand_kode[strandx$nummer == ints$Kommunenum[1]]
as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[1]])
as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[2]])
ints$Kommunenum[1]
ints$Kommunenum[2]
ints$Kommunenav[2]
ints$Kommunenav[2]
ints$Kommunenav[1]
ints$Kommunenum[1]
is.na(ints$Kommunenum[1])
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
if(is.na(ints$Kommunenum[i])){
temp1 <- NA
temp2 <- NA
} else {
temp1 <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
temp2 <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Strand_kode[i] <- temp1
longlatTable$Kommune_2018[i] <- temp2
}
}
longlatTable
View(longlatTable)
# Identify municipalities intersecting with input coordinates
ints <- data.frame(Kommunenum = "", Kommunenav = "")
for (i in 1:length(pts)){
if(length(kom_ll[pts[i], ]) == 1) {
ints[i,] <- as.data.frame(kom_ll[pts[i], ])
} else {
ints[i,] <- NA
}
}
# Cross refference municipality-codes between tables, and add municipalities and strand-codes to the input dataset
# Add strand-codes to the dataset
longlatTable$Strand_kode <- ""
longlatTable$Kommune_2018 <- ""
for (i in 1:nrow(longlatTable)) {
if(is.na(ints$Kommunenum[i])){
longlatTable$Strand_kode[i] <- NA
longlatTable$Kommune_2018[i] <- NA
} else {
longlatTable$Strand_kode[i] <- as.vector(strandx$Strand_kode[strandx$nummer == ints$Kommunenum[i]])
longlatTable$Kommune_2018[i] <- as.vector(strandx$Gammel_kommune[strandx$nummer == ints$Kommunenum[i]])
}
}
devtools::load_all(".")
library(strandr)
